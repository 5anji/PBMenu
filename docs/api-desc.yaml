openapi: 3.0.3

info:
  title: API for MenuHub website
  contact:
    email: gitlanm@gmail.com
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
servers:
  - url: http://192.168.9.147:8081/api
externalDocs:
  description: See our source code
  url: https://github.com/5anji/PBMenu

tags:
  - name: Restaurant
    description: Operations about restaurants
  - name: Food
    description: Operations about food
  - name: Drinks
    description: Operations about drinks
  - name: Subsidiary
    description: Operations about subsidiary
  - name: Tags
    description: Operations about tags
paths:
  /restaurant:
    get:
      tags:
        - Restaurant
      summary: Show all restaurants
      operationId: getRestaurantAll
      parameters:
        - in: query
          name: pages
          required: true
          schema:
            type: integer
          description: The number of pages
        - in: query
          name: nrOfItems
          required: true
          schema:
            type: integer
          description: The numbers of items to return

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
        "400":
          description: Invalid status value
        "404":
          description: Not found
    post:
      tags:
        - Restaurant
      summary: Add retaurant to remote DB
      operationId: getRestaurantById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - restaurantStatus
              properties:
                restaurantLogoUrl:
                  type: string
                  description: url of the image that will be placed as rest. preview
                photoUrl:
                  type: string
                  description: url of the image that will be placed as rest. preview
                name:
                  type: string
                  description: title under photo
                restaurantStatus:
                  type: string
                  enum:
                    - AVAILABLE
                    - DETACHED
                  description: Current restaurant status
                pricing:
                  type: integer
                  minimum: 1
                  maximum: 5
                phone_number:
                  type: string
                  format: number
                  description: phone numbers to contact with
                  example: "+373 79123456"
                email:
                  type: string
                  format: email
                  description: mail address to contact with
                  example: "qwerty@gmail.com"
                description:
                  type: string
                  format: any
                  description: Small descrition of the restaurant
                  example: Lorem ipsum vuisum mapsum libi
      responses:
        "201":
          description: created object
        "400":
          description: Invalid status value
  /restaurant/{restaurantId}:
    get:
      tags:
        - Restaurant
      summary: Find restaurant by ID
      operationId: getRestaurant
      parameters:
        - in: path
          name: restaurantId
          description: ID of restaurant to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                properties:
                  restaurant:
                    $ref: "#/components/schemas/Restaurant"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
    delete:
      tags:
        - Restaurant
      summary: Delete restaurant by ID
      operationId: deleteRestaurant
      parameters:
        - in: path
          name: restaurantId
          description: ID of restaurant to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
    put:
      tags:
        - Restaurant
      summary: Update restaurant status
      operationId: detachRestaurant
      parameters:
        - in: path
          name: restaurantId
          description: ID of restaurant to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
  /restaurant/{restaurantId}/food:
    get:
      tags:
        - Restaurant
      summary: Return array of food
      operationId: getRestaurantFood
      parameters:
        - in: path
          name: restaurantId
          description: ID of restaurant to return
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: pages
          required: true
          schema:
            type: integer
          description: The number of pages
        - in: query
          name: nrOfItems
          required: true
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Food"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
    
  /restaurant/{restaurantId}/subsidiary:
    get:
      tags:
        - Restaurant
      summary: Return array of subsidiaries
      operationId: getRestaurantSubsidiary
      parameters:
        - in: path
          name: restaurantId
          description: ID of restaurant to return
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: pages
          required: true
          schema:
            type: integer
          description: The number of pages
        - in: query
          name: nrOfItems
          required: true
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Subsidiary"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
  /restaurant/{restaurantId}/drink:
    get:
      tags:
        - Restaurant
      summary: Return array of drinks
      operationId: getRestaurantDrink
      parameters:
        - in: path
          name: restaurantId
          description: ID of restaurant to return
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: pages
          required: true
          schema:
            type: integer
          description: The number of pages
        - in: query
          name: nrOfItems
          required: true
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Drink"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found

  /food:
    get:
      tags:
        - Food
      summary: Get array of food
      operationId: getFood
      parameters:
        - in: query
          name: pages
          required: true
          schema:
            type: integer
          description: The number of pages
        - in: query
          name: nrOfItems
          required: true
          schema:
            type: integer
          description: The numbers of items to return

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Food"
        "400":
          description: Invalid status value
        "404":
          description: Not found
    post:
      tags:
        - Food
      summary: Add food to DB
      operationId: postFood
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - restaurantId
                - foodName
                - foodStatus
                - foodPrice
              properties:
                foodName:
                  type: string
                  example: some_food
                foodPhoto:
                  type: string
                foodIngredients:
                  type: string
                restaurantId:
                  type: string
                  format: uuid
                  example: e762634c-3e41-11eb-b897-0862660ccbd4
                foodStatus:
                  type: string
                  enum:
                    - AVAILABLE
                    - DETACHED
                foodPrice:
                  type: number
                  format: float
                  example: 66.6
                isDeliverable:
                  type: boolean
                isSpicy:
                  type: boolean
                isVegetarian:
                  type: boolean
      responses:
        "201":
          description: created object
        "400":
          description: Invalid status value
  /food/{foodId}:
    delete:
      tags:
        - Food
      summary: Delete food from DB
      operationId: deleteFoodID
      parameters:
        - in: path
          name: foodId
          description: ID of food to return
          required: true
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid status value
        "404":
          description: Not found
    get:
      tags:
        - Food
      summary: Get a food
      operationId: getFoodID
      parameters:
        - in: path
          name: foodId
          description: ID of food to return
          required: true
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Food"
        "400":
          description: Invalid status value
        "404":
          description: Not found
    put:
      tags:
        - Food
      summary: Update food on DB
      operationId: putFoodID
      parameters:
        - in: path
          name: foodId
          description: ID of food to return
          required: true
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid status value
        "404":
          description: Not found

  /subsidiary:
    post:
      tags:
        - Subsidiary
      summary: Add subsidiary to DB
      operationId: postSubsidiary
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - restaurantId
                - subsidiaryName
                - subsidiaryStatus
                - schedule
              properties:
                subsidiaryName:
                  type: string
                  example: subsidiary name
                phoneNumber:
                  type: string
                  description: phone numbers to contact with
                  example: "+373 79123456"
                address:
                  type: string
                  example: "St. cel Mare str. 1/1"
                schedule:
                  type: string
                  example: "7:00 - 20:00"
                subsidiaryStatus:
                  type: string
                  enum:
                    - AVAILABLE
                    - DETACHED
                restaurantId:
                  type: string
                  format: uuid
                  example: e762634c-3e41-11eb-b897-0862660ccbd4
      responses:
        "201":
          description: created object
        "400":
          description: Invalid status value
  /subsidiary/{subsidiaryId}:
    delete:
      tags:
        - Subsidiary
      summary: Delete subsidiary by ID
      operationId: deleteSubsidiary
      parameters:
        - in: path
          name: subsidiaryId
          description: ID of subsidiary to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found
    put:
      tags:
        - Subsidiary
      summary: Update subsidiary status
      operationId: putSubsidiaryById
      parameters:
        - in: path
          name: subsidiaryId
          description: ID of subsidiary to return
          required: true
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Restaurant"
        "400":
          description: Invalid status value
        "404":
          description: Not found
    get:
      tags:
        - Subsidiary
      summary: Get a specific subsidiary
      operationId: getSubsidiaryById
      parameters:
        - in: path
          name: subsidiaryId
          description: ID of subsidiary to return
          required: true
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Subsidiary"
        "400":
          description: Invalid status value
        "404":
          description: Not found
  /subsidiary/{subsidiaryId}/tag:
    get:
      tags:
        - Subsidiary
      summary: Return array of tags
      operationId: getRestaurantTags
      parameters:
        - in: path
          name: restaurantId
          description: ID of restaurant to return
          required: true
          schema:
            type: string
            format: uuid
        - in: query
          name: pages
          required: true
          schema:
            type: integer
          description: The number of pages
        - in: query
          name: nrOfItems
          required: true
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Tags"
        "400":
          description: Invalid ID supplied
        "404":
          description: Not found

  /drink:
    post:
      tags:
        - Drinks
      summary: Add drink to DB
      operationId: postDrink
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - restaurantId
                - drinkName
                - drinkStatus
                - drinkPrice
              properties:
                drinkName:
                  type: string
                  example: some_food
                drinkPhoto:
                  type: string
                drinkIngredients:
                  type: string
                drinkStatus:
                  type: string
                  enum:
                    - AVAILABLE
                    - DETACHED
                drinkPrice:
                  type: number
                  format: float
                  example: 66.6
                isDeliverable:
                  type: boolean
                isAlcoholic:
                  type: boolean
                restaurantId:
                  type: string
                  format: uuid
                  example: e762634c-3e41-11eb-b897-0862660ccbd4

      responses:
        "201":
          description: created object
        "400":
          description: Invalid status value
  /drink/{drinkId}:
    delete:
      tags:
        - Drinks
      summary: Delete drink from DB
      operationId: postDrinkById
      parameters:
        - in: path
          name: drinkId
          description: ID of the drink
          required: true
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid status value
        "404":
          description: Not found
    get:
      tags:
        - Drinks
      summary: Get drink from DB
      operationId: getDrinkById
      parameters:
        - in: path
          name: drinkId
          description: ID of the drink
          required: true
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Drink"
        "400":
          description: Invalid status value
        "404":
          description: Not found
    put:
      tags:
        - Drinks
      summary: Update drink status
      operationId: putDrinkById
      parameters:
        - in: path
          name: drinkId
          description: ID of the drink
          required: true
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid status value
        "404":
          description: Not found
  /tag:
    post:
      tags:
        - Tags
      summary: Add drink to DB
      operationId: postTag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tagName
                - subsidiaryId
              properties:
                tagName:
                  type: string
                  example: subsidiary name
                subsidiaryId:
                  type: string
                  format: uuid
                  example: e762634c-3e41-11eb-b897-0862660ccbd4

      responses:
        "201":
          description: created object
        "400":
          description: Invalid status value
  /tag/{tagId}:
    delete:
      tags:
        - Tags
      summary: Delete drink from DB
      operationId: postTagById
      parameters:
        - in: path
          name: tagId
          description: ID of the tag
          required: true
          schema:
            type: string
            format: uuid

      responses:
        "200":
          description: successful operation
        "400":
          description: Invalid status value
        "404":
          description: Not found
    get:
      tags:
        - Tags
      summary: Get drink from DB
      operationId: getTagById
      parameters:
        - in: path
          name: tagId
          description: ID of the tag
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tags"
        "400":
          description: Invalid status value
        "404":
          description: Not found
components:
  schemas:
    Restaurant:
      type: object
      required: 
        - id
        - name
        - restaurantStatus
      properties:
        id:
          type: string
          format: uuid
          example: e762634c-3e41-11eb-b897-0862660ccbd4
        restaurantLogoUrl:
          type: string
          description: url of the image that will be placed as rest. preview
        photoUrl:
          type: string
          description: url of the image that will be placed as rest. preview
        name:
          type: string
          description: title under photo
        restaurantStatus:
          type: string
          enum:
            - AVAILABLE
            - DETACHED
          description: Current restaurant status
        pricing:
          type: integer
          minimum: 1
          maximum: 5
        phone_number:
          type: string
          format: number
          description: phone numbers to contact with
          example: "+373 79123456"
        email:
          type: string
          format: email
          description: mail address to contact with
          example: "qwerty@gmail.com"
        description:
          type: string
          format: any
          description: Small descrition of the restaurant
          example: Lorem ipsum vuisum mapsum libi
    Food:
      type: object
      required: 
        - foodId
        - restaurantId
        - foodName
        - foodStatus
        - foodPrice
      properties:
        foodId:
          type: string
          format: uuid
          example: e762634c-3e41-11eb-b897-0862660ccbd4
        foodName:
          type: string
          example: some_food
        foodPhoto:
          type: string
        foodIngredients:
          type: string
        restaurantId:
          type: string
          format: uuid
          example: e762634c-3e41-11eb-b897-0862660ccbd4
        foodStatus:
          type: string
          enum:
            - AVAILABLE
            - DETACHED
        foodPrice:
          type: number
          format: float
          example: 66.6
        isDeliverable:
          type: boolean
        isSpicy:
          type: boolean
        isVegetarian:
          type: boolean
    Drink:
      type: object
      required: 
        - drinkId
        - restaurantId
        - drinkName
        - drinkStatus
        - drinkPrice
      properties:
        drinkId:
          type: string
          format: uuid
          example: e762634c-3e41-11eb-b897-0862660ccbd4
        drinkName:
          type: string
          example: some_food
        drinkPhoto:
          type: string
        drinkIngredients:
          type: string
        drinkStatus:
          type: string
          enum:
            - AVAILABLE
            - DETACHED
        drinkPrice:
          type: number
          format: float
          example: 66.6
        isDeliverable:
          type: boolean
        isAlcoholic:
          type: boolean
        restaurantId:
          type: string
          format: uuid
          example: e762634c-3e41-11eb-b897-0862660ccbd4
    Tags:
      type: object
      required: 
        - tagId
        - tagName
        - subsidiaryId
      properties:
        tagId:
          type: string
          format: uuid
          example: e762634c-3e41-11eb-b897-0862660ccbd4
        tagName:
          type: string
          example: subsidiary name
        subsidiaryId:
          type: string
          format: uuid
          example: e762634c-3e41-11eb-b897-0862660ccbd4
    Subsidiary:
      type: object
      required: 
        - subsidiaryId
        - restaurantId
        - subsidiaryName
        - subsidiaryStatus
        - schedule
      properties:
        subsidiaryId:
          type: string
          format: uuid
          example: e762634c-3e41-11eb-b897-0862660ccbd4
        subsidiaryName:
          type: string
          example: subsidiary name
        phoneNumber:
          type: string
          description: phone numbers to contact with
          example: "+373 79123456"
        address:
          type: string
          example: "St. cel Mare str. 1/1"
        schedule:
          type: string
          example: "7:00 - 20:00"
        subsidiaryStatus:
          type: string
          enum:
            - AVAILABLE
            - DETACHED
        restaurantId:
          type: string
          format: uuid
          example: e762634c-3e41-11eb-b897-0862660ccbd4
